"use strict";

function _classCallCheck(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
}
var _createClass = function() {
        function n(e, t) {
            for (var a = 0; a < t.length; a++) {
                var n = t[a];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n)
            }
        }
        return function(e, t, a) {
            return t && n(e.prototype, t), a && n(e, a), e
        }
    }(),
    MoneyMage = function() {
        function e() {
            _classCallCheck(this, e), this.setColors(["#4682b4", "#5d92bd", "#74a1c7", "#8bb1d0", "#a3c1da", "#b4464b", "#bd5d62"], "steelblue", "#ccc"), this.setAssetTypes(["Cash", "Vehicles", "Pension", "Shares", "Property", "Mortgage", "0% Debt"]), this.setLocaleCurrency("en-GB", "GBP"), this.setHistoricalBond([1.0238, 1.0346, 1.0321, .9469, 1.1115, 1.052633333, 1.0902, 1.059833333, 1.055233333, .9908, 1.045066667, 1.041466667, 1.046966667, 1.0104, 1.026033333, 1.036366667, 1.031766667, 1.0366, 1.020066667, 1.005933333, 1.021466667, 1.0372, 1.019566667, 1.003433333, 1.0281, 1.0255, 1.034633333, 1.0081, .9934, 1.031033333, 1.020333333, 1.0077, 1.0706, 1.0317, 1.049866667, 1.034333333, 1.041466667, 1.0262, 1.0144, 1.0121, 1.044866667, .9987666667, 1.095966667, 1.093733333, 1.061, 1.050033333, 1.018133333, 1.068133333, 1.135666667, 1.055033333, 1.031833333, 1.0291, 1.017066667, 1.1023, 1.241566667, 1.093333333, 1.129566667, 1.190166667, 1.1725, 1.010366667, 1.100033333, 1.138633333, 1.066233333, 1.127433333, 1.0832, 1.112133333, .9829666667, 1.163766667, 1.037433333, 1.089433333, 1.092166667, .9907666667, 1.106033333, 1.055933333, 1.096333333, 1.049733333, 1.0525, 1.036466667, 1.0458, 1.059033333, 1.054666667, 1.0412, 1.0565, 1.095566667, 1.043933333, .9663333333, 1.070533333, 1.0021, 1.037933333, 1.044833333, .9972, 1.0884]), this.setHistoricalStock([1.4381, .917, .7488, .5616, .9136, 1.4998, .9881, 1.4674, 1.3194, .6466, 1.2928, .989, .8933, .8723, 1.1917, 1.2506, 1.1903, 1.3582, .9157, 1.052, 1.057, 1.183, 1.3081, 1.2368, 1.1815, .9879, 1.5256, 1.326, 1.0744, .8954, 1.4372, 1.1206, 1.0034, 1.2664, .9119, 1.2261, 1.1642, 1.124, .9003, 1.238, 1.1081, .9176, 1.0356, 1.1422, 1.1876, .8569, .741, 1.37, 1.2383, .9302, 1.0651, 1.1852, 1.3174, .953, 1.2042, 1.2234, 1.0615, 1.3124, 1.1849, 1.0581, 1.1654, 1.3148, .9694, 1.3023, 1.0749, 1.0997, 1.0133, 1.372, 1.2268, 1.331, 1.2834, 1.2089, .9097, .8815, .7803, 1.2836, 1.1074, 1.0483, 1.1561, 1.0548, .6345, 1.2594, 1.1482, 1.021, 1.1589, 1.3215, 1.1352, 1.0138, 1.1177, 1.2161, .9577, 1.3122]), this.setHistoricalInflation([.985, 1, .9733, .9107, .897, .9481, 1.0348, 1.0255, 1.013, 1.0373, .977, .987, 1.0072, 1.0512, 1.1092, 1.0597, 1.0164, 1.0227, 1.0848, 1.1439, 1.0769, .9903, 1.0109, 1.0786, 1.0228, 1.0082, 1.0031, .9972, 1.0153, 1.0334, 1.0273, 1.0146, 1.0107, 1.012, 1.0124, 1.0128, 1.0159, 1.0302, 1.0277, 1.0427, 1.0546, 1.0584, 1.0429, 1.0327, 1.0618, 1.1105, 1.0914, 1.0574, 1.065, 1.0763, 1.1125, 1.1355, 1.1033, 1.0613, 1.0321, 1.043, 1.0355, 1.019, 1.0366, 1.0408, 1.0483, 1.054, 1.0423, 1.0303, 1.0295, 1.0261, 1.0281, 1.0293, 1.0234, 1.0155, 1.0219, 1.0338, 1.0283, 1.0159, 1.0227, 1.0268, 1.0339, 1.0339, 1.0323, 1.0285, 1.0384, .9964, 1.0164, 1.0316, 1.0207, 1.0146, 1.0162, 1.0012, 1.0126, 1.0213, 1.0244, 1.0229])
        }
        return _createClass(e, [{
            key: "setHistoricalBond",
            value: function t(e) {
                this.historicalbond = e
            }
        }, {
            key: "setHistoricalStock",
            value: function a(e) {
                this.historicalstock = e
            }
        }, {
            key: "setHistoricalInflation",
            value: function n(e) {
                this.historicalinflation = e
            }
        }, {
            key: "setColors",
            value: function r(e, t, a) {
                this.colors = e, this.primaryColor = t, this.secondaryColor = a
            }
        }, {
            key: "setLocaleCurrency",
            value: function o(e, t) {
                this.locale = e, this.currencyCode = t, this.currencySymbol = (0).toLocaleString(e, {
                    style: "currency",
                    currency: t,
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).replace(/\d/g, "").trim()
            }
        }, {
            key: "setAssetTypes",
            value: function i(e) {
                this.assetTypes = e
            }
        }, {
            key: "_generateLink",
            value: function l(e, t) {
                var a = document.createElement("a"),
                    n = document.createTextNode(e);
                return a.appendChild(n), a.title = e, a.href = "#" + t, a
            }
        }, {
            key: "_tocListToGraph",
            value: function s(e, t, a, n) {
                for (; a < n.length;) {
                    var r = n[a],
                        o = this._getNodeDepth(r);
                    if (o == e) t.push(r), ++a;
                    else {
                        if (o < e) return a;
                        var i = [];
                        t.push(i), a = this._tocListToGraph(e + 1, i, a, n)
                    }
                }
            }
        }, {
            key: "_getNodeDepth",
            value: function c(e) {
                return "H2" == e.nodeName ? 0 : "H3" == e.nodeName ? 1 : "H4" == e.nodeName ? 2 : void 0
            }
        }, {
            key: "_appendOl",
            value: function d(e, t, a) {
                var n, r = document.createElement("ol");
                0 < a && r.classList.add("nestedtoc"), e.appendChild(r);
                for (var o = 0; o < t.length; ++o) {
                    var i = t[o];
                    Array.isArray(i) ? this._appendOl(n, i, a + 1) : ((n = document.createElement("li")).appendChild(this._generateLink(i.innerHTML, i.id)), r.appendChild(n))
                }
            }
        }, {
            key: "_addMonths",
            value: function u(e, t) {
                return e.setMonth(e.getMonth() + t), e
            }
        }, {
            key: "_generateCreditCard",
            value: function h(e, t, a, n, r, o) {
                for (var i = [], l = 0 == o, s = t, c = 0, d = 0, u = 0; u < e && (c += s * r, (d = (s += s * r) * a) < n && (d = n), s -= d, l || (s -= o), s <= 0 && (s = 0), i.push({
                        date: this._addMonths(new Date, u),
                        p: c,
                        pi: s
                    }), !(s <= 0)); ++u);
                return i
            }
        }, {
            key: "_generateRentData",
            value: function m(e, t, a, n) {
                for (var r = [], o = e, i = 0; i < n; ++i) o += t * (1 + a * i), r.push({
                    date: this._addMonths(new Date, i),
                    p: o,
                    pi: o
                });
                return r
            }
        }, {
            key: "_generateInterestData", //alukret
            value: function p(e, t, a, n) {
                for (var r = [], o = e, i = 0; i < n; ++i) {
                    var l = 1 * t / 12 * (o += a);
					//l, 
					if ( (i+1)%12 == 0 ) {
						r.push({
							date: this._addMonths(new Date, i),
							p: o,
							pi: o + l
						})
					};
					o += l
                }
                return r
            }
        }, {
            key: "_generateLoanData",
            value: function y(e, t, a, n) {
                var r = [],
                    o = t * e / (1 - Math.pow(1 + t, -a)),
                    i = o * a - e,
                    l = e,
                    s = 0,
                    c = 0,
                    d = 0;
                for (i = 0; i < a; ++i) {
                    c += n, d += o;
                    var u = l * t;
                    if (s += u, (l += u -= o + n) <= 0 && (l = 0), r.push({
                            date: this._addMonths(new Date, i),
                            p: l,
                            pi: s,
                            po: c,
                            pp: d
                        }), l <= 0) break
                }
                return r
            }
        }, {
            key: "_generateDrawdownData",
            value: function A(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _) {
                for (var C = [], f = new Date, b = o, k = i, B = 0, S = !1, D = !1, I = 0; I < e; ++I) {
                    var E = Math.floor(Math.random() * this.historicalbond.length);
                    v && (p = this.historicalbond[E]), w && (y = this.historicalstock[E]), _ && (m = this.historicalinflation[E]);
                    var M = f.getFullYear() - t,
                        L = l;
                    if (C.push({
                            date: this._addMonths(new Date, 12 * I),
                            pi: b + k,
                            pp: b,
                            pr: k,
                            pd: B,
                            bsw: D,
                            failed: S
                        }), B = 0, S = D = !1, r <= M ? k += c : M < a && (b += d, k += u), a <= M) {
                        L = s;
                        var N = b * g;
                        if (B += N, b -= N, n <= M) {
                            var P = k * g;
                            B += P, k -= P
                        }
                        if (B < h) {
                            var x = h - B;
                            B = h, D = !0;
                            var T = Math.min(x, b);
                            if (b -= T, x -= T, n <= M && 0 < x) {
                                var F = Math.min(x, k);
                                k -= F, x -= F
                            }
                            if (0 < x && (S = !0), S) return C[C.length - 1].failed = !0, C
                        }
                    }
                    var Q = b * L,
                        H = b * (1 - L),
                        R = k * L,
                        G = k * (1 - L);
                    b = (Q *= p) + (H *= y), k = (R *= p) + (G *= y), f = this._addMonths(new Date, 12 * (I + 1)), c *= m, d *= m, u *= m, h *= m
                }
                return C
            }
        }, {
            key: "_prepData",
            value: function g(e) {
                return e.map(function(e) {
                    return {
                        x: e.date,
                        y: e.pi
                    }
                })
            }
        }, {
            key: "clamp",
            value: function v(e, t, a) {
                return e <= t ? t : a <= e ? a : e
            }
        }, {
            key: "_appendLink", //alukret
            value: function w(e) {
                var t = document.createElement("a"),
                    a = document.createTextNode("Free Personal Finance Calculators by Money Mage");
                t.appendChild(a), t.title = "Free PF Calculators by Money Mage", t.href = "https://www.moneymage.net/calculators/", t.rel = "dofollow", e.style.textAlign = "right", t.style.fontSize = "x-small", e.appendChild(t)
            }
        }, {
            key: "_readyChart",
            value: function _(e) {
                var t = document.getElementById(e),
                    a = document.createElement("canvas"),
                    n = document.createElement("div");
                return t.appendChild(a), t.appendChild(n), /*this._appendLink(n),*/ a
            }
        }, {
            key: "_getIncomeTaxFromBands",
            value: function C(e, t) {
                for (var a = e, n = 0, r = [], o = [], i = 0, l = 0, s = 0; s < t.length; ++s) {
                    var c = t[s],
                        d = Number.MAX_VALUE;
                    s < t.length - 1 && (d = t[s + 1].band);
                    var u = d - n - 1,
                        h = Math.min(a, u),
                        m = h * c.rate;
                    n += u, i += m, l += h - m, r.push({
                        x: c.name,
                        y: m
                    }), o.push({
                        x: c.name,
                        y: h - m
                    }), a -= h
                }
                return [r, o, i, l]
            }
        }, {
			
            key: "_drawChart", //alukret
            value: function f(e, t, a, n, r, o, i) {
                var l = arguments.length <= 5 || o === undefined ? null : arguments[5],
                    s = !(arguments.length <= 6 || i === undefined) && arguments[6],
                    c = this._readyChart(a),
                    d = this.locale,
                    u = this.currencyCode,
                    h = [];
                if (null != t) {
					//source data with rate = 0
                    var m = {
						backgroundColor: 'coral',
                        fill: !1,
                        pointRadius: 0,
                        borderColor: this.secondaryColor,
                        data: e
                    };
                    h.push(m)
                } else t = e;
				//current data with rate set by user
                var p = {
					backgroundColor: 'red',
                    fill: !1,
                    pointRadius: 0,
                    borderColor: this.primaryColor,
                    data: t
                };
                h.push(p), "bar" == n && (null != m && (m.backgroundColor = this.secondaryColor, m.fill = !0), p.backgroundColor = this.primaryColor, p.fill = !0);
                var y = {
                        type: r,
						stacked: true,
						offset: true,
                        /*ticks: {
                            callback: function w(e) {
								console.log(e);
                                return e;
                            }
                        }*/
					},
                    g = {
                        ticks: {
                            callback: function w(e) {
                                return e.toLocaleString(d, {
                                    style: "currency",
                                    currency: u
                                })
                            }
                        }
                    };
                s && (y.stacked = !0, g.stacked = !0), null != l && (y.labels = l);
                var v = c.getContext("2d");
				
                return new Chart(v, {
					type: 'bar',
					//type: n,
                    data: {
                        datasets: h
                    },
                    options: {
                        legend: {
                            display: !1
                        },
                        tooltips: {
							custom: function(tooltip) {
								if (!tooltip) return;
								// disable displaying the color box;
								tooltip.displayColors = false;
							},
							callbacks: {
								label: function(tooltipItem, data) {
									return '$' + Math.round(tooltipItem.yLabel.toString()).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
								},
								title: function(tooltipItem, data) {
									return 'Year: ' + tooltipItem[0].xLabel.getFullYear();
								},
							},
							//enabled: !1
							//titleFontSize: 0, 
                        },
                        hover: {
                            mode: null
                        },
                        scales: {
                            xAxes: [y],
                            yAxes: [g]
                        }
                    }
                })
            }
        }, {
            key: "_drawMultiLineChart",
            value: function b(e, t, a, n, r, o, i) {
                var l = arguments.length <= 5 || o === undefined ? null : arguments[5],
                    s = (!(arguments.length <= 6 || i === undefined) && arguments[6], this._readyChart(a)),
                    c = this.locale,
                    d = this.currencyCode,
                    u = [],
                    h = {
                        fill: !1,
                        pointRadius: 0,
                        borderColor: this.primaryColor,
                        data: e
                    };
                u.push(h);
                for (var m = 0; m < t.length; ++m) {
                    var p = {
                        fill: !1,
                        pointRadius: 0,
                        borderColor: this.secondaryColor,
                        data: t[m],
                        borderwidth: .5
                    };
                    u.push(p)
                }
                var y = {
                        type: r
                    },
                    g = {
                        ticks: {
                            callback: function w(e) {
                                return e.toLocaleString(c, {
                                    style: "currency",
                                    currency: d
                                })
                            }
                        }
                    };
                null != l && (y.labels = l);
                var v = s.getContext("2d");
                return new Chart(v, {
                    type: n,
                    data: {
                        datasets: u
                    },
                    options: {
                        legend: {
                            display: !1
                        },
                        tooltips: {
                            enabled: !1
                        },
                        hover: {
                            mode: null
                        },
                        scales: {
                            xAxes: [y],
                            yAxes: [g]
                        }
                    }
                })
            }
        }, {
            key: "createPercentileChart",
            value: function k(e, n) {
                this.primaryColor;
                var r = this;
                d3.csv(e).then(function(e) {
                    var t = 0,
                        a = e.map(function(e) {
                            return {
                                x: ++t,
                                y: parseInt(e.UKEP)
                            }
                        });
                    r._drawChart(a, null, n, "line", "linear")
                })
            }
        }, {
            key: "createLoanInterestChart",
            value: function B(e, t, a, n, r) {
                var o = this._generateLoanData(e, t / 12, n, 0);
                if (0 < a) {
                    var i = this._generateLoanData(e, t / 12, n, a);
                    this._drawChart(this._prepData(o), this._prepData(i), r, "line", "time")
                } else this._drawChart(this._prepData(o), null, r, "line", "time")
            }
        }, {
            key: "createDrawdownChart",
            value: function S(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _, C) {
                var f = this._generateDrawdownData(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _);
                this._drawChart(this._prepData(f), null, C, "line", "time")
            }
        }, {
            key: "createDrawdownChartMC",
            value: function I(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _, C, f) {
                for (var b = [], k = 0; k < C; ++k) b.push(this._generateDrawdownData(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _));
                b.sort(function(e, t) {
                    return e[e.length - 1].pi - t[t.length - 1].pi
                });
                var B = Math.floor(b.length / 2),
                    S = b[B];
                b.splice(B, 1);
                var D = [];
                for (k = 0; k < b.length; ++k) D.push(this._prepData(b[k]));
                this._drawMultiLineChart(this._prepData(S), D, f, "line", "time")
            }
        }, {
            key: "createMortgageToRentComparisonChart",
            value: function D(e, t, a, n, r, o, i) {
                var l = this._generateLoanData(e, n / 12, o, 0),
                    s = this._generateRentData(t, a, r / 12, o);
                this._drawChart(this._prepData(s), this._prepData(l), i, "line", "time")
            }
        }, {
            key: "createIncomeTaxBandsChart",
            value: function E(e, t, a) {
                var n = this._getIncomeTaxFromBands(e, t);
                this._drawChart(n[0], n[1], a, "bar", "category", t.map(function(e) {
                    return e.name
                }), !0)
            }
        }, {
            key: "createCreditCardInterestChart",
            value: function M(e, t, a, n, r, o, i) {
                var l = this._generateCreditCard(o, e, a, n, t / 12, 0);
                if (0 < r) {
                    var s = this._generateCreditCard(o, e, a, n, t / 12, r);
                    this._drawChart(this._prepData(l), this._prepData(s), i, "line", "time")
                } else this._drawChart(this._prepData(l), null, i, "line", "time")
            }
        }, {
            key: "createCompoundInterestChart",
            value: function L(e, t, a, n, r) {
                var o = this._generateInterestData(e, t, a, n),
                    i = this._generateInterestData(e, 0, a, n);
                this._drawChart(this._prepData(i), this._prepData(o), r, "line", "time")
            }
        }, {
            key: "ready",
            value: function N(e) {
                document.addEventListener("DOMContentLoaded", function() {
                    e()
                })
            }
        }, {
            key: "_getColor",
            value: function P(e, t) {
                return e * t < 0 ? "#b4464b" : "#82b446"
            }
        }, {
            key: "_updateTable",
            value: function x(e, t, a, n, r) {
                for (var o = document.getElementById("tabulated-data").tBodies[0], i = 0, l = 0, s = document.createElement("tbody"), c = 0; c < e.length; ++c) {
                    "Mortgage" != e[c] && (i += parseFloat(a[c]), l += parseFloat(n[c]));
                    var d = Math.abs(t[c]),
                        u = Math.abs(a[c]),
                        h = Math.abs(n[c]),
                        m = (d - u) / u;
                    0 == u && (m = 0);
                    var p = (d - h) / h;
                    0 == h && (p = 0);
                    var y = (w = s.insertRow()).insertCell(0),
                        g = w.insertCell(1),
                        v = w.insertCell(2);
                    y.innerHTML = e[c], g.innerHTML = '<div style="color:' + this._getColor(m, r[c]) + '">' + (100 * m).toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }) + "%</div>", v.innerHTML = '<div style="color:' + this._getColor(p, r[c]) + '">' + (100 * p).toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }) + "%</div>"
                }
                var w, _ = (1 - i) / i,
                    C = (1 - l) / l;
                y = (w = s.insertRow()).insertCell(0), g = w.insertCell(1), v = w.insertCell(2);
                y.innerHTML = "<b>Total</b>", g.innerHTML = '<div style="color:' + this._getColor(_, 1) + '"><b>' + (100 * _).toLocaleString("en-GB", {
                    maximumFractionDigits: 0
                }) + "%</b></div>", v.innerHTML = '<div style="color:' + this._getColor(C, 1) + '"><b>' + (100 * C).toLocaleString("en-GB", {
                    maximumFractionDigits: 0
                }) + "%</b></div>", o.parentNode.replaceChild(s, o)
            }
        }, {
            key: "_processSeries",
            value: function T(e, t, a, n) {
                return {
                    data: e.map(function(e) {
                        return {
                            x: e.Date,
                            y: e[t]
                        }
                    }),
                    backgroundColor: a,
                    label: n
                }
            }
        }, {
            key: "_process",
            value: function F(e) {
                return [this._processSeries(e, "Cash", this.colors[0], "Cash"), this._processSeries(e, "Vehicles", this.colors[1], "Vehicles"), this._processSeries(e, "Pension", this.colors[2], "Pension"), this._processSeries(e, "SS", this.colors[3], "Shares"), this._processSeries(e, "Property", this.colors[4], "Property"), this._processSeries(e, "Mortgage", this.colors[5], "Mortgage"), this._processSeries(e, "Debt", this.colors[6], "0% Debt")]
            }
        }, {
            key: "_normalize",
            value: function Q(e) {
                for (var t = e.slice(), a = 0, n = 0; n < e.length; ++n) a += Math.abs(e[n]);
                for (n = 0; n < e.length; ++n) t[n] = Math.abs(e[n]) / a;
                return t
            }
        }, {
            key: "monthlySavingsReport",
            value: function H(e) {
                var u = this;
                d3.csv(e).then(function(e) {
                    var t = u._readyChart("savings-chart"),
                        a = (new Chart(t, {
                            type: "bar",
                            data: {
                                datasets: u._process(e, -1, -1)
                            },
                            options: {
                                legend: {
                                    display: !0
                                },
                                tooltips: {
                                    enabled: !1
                                },
                                hover: {
                                    mode: null
                                },
                                scales: {
                                    xAxes: [{
                                        type: "time",
                                        stacked: !0
                                    }],
                                    yAxes: [{
                                        stacked: !0
                                    }]
                                }
                            }
                        }), u._readyChart("yoy-chart")),
                        n = e[e.length - 1],
                        r = [n.Cash, n.Vehicles, n.Pension, n.SS, n.Property, n.Mortgage, n.Debt],
                        o = u._normalize(r),
                        i = e[e.length - 13],
                        l = [i.Cash, i.Vehicles, i.Pension, i.SS, i.Property, i.Mortgage, i.Debt],
                        s = u._normalize(l),
                        c = e[e.length - 2],
                        d = [c.Cash, c.Vehicles, c.Pension, c.SS, c.Property, c.Mortgage, c.Debt];
                    new Chart(a, {
                        type: "doughnut",
                        data: {
                            labels: u.assetTypes,
                            datasets: [{
                                label: n.Date,
                                backgroundColor: u.colors,
                                data: o
                            }, {
                                label: i.Date,
                                backgroundColor: u.colors,
                                data: s
                            }]
                        },
                        options: {
                            legend: {
                                display: !0
                            },
                            tooltips: {
                                enabled: !1
                            },
                            hover: {
                                mode: null
                            }
                        }
                    });
                    u._updateTable(u.assetTypes, r, d, l, [1, 1, 1, 1, 1, -1, -1])
                })
            }
        }, {
            key: "_addHeader",
            value: function R(e, t) {
                var a = document.createElement("th");
                a.innerHTML = t, e.appendChild(a)
            }
        }, {
            key: "_updateCompoundTable", //alukret
            value: function G(e, t, a) {
                for (var n = document.getElementById("tabulated-data").tBodies[0], r = document.createElement("tbody"), o = 0; o < e.length; ++o)
                    if (!(12 < e.length && (o + 1) % 1 != 0)) {
                        var i = e[o],
                            l = t[o],
                            s = r.insertRow(),
                            c = s.insertCell(0),
                            d = s.insertCell(1),
                            u = s.insertCell(2),
                            h = s.insertCell(3),
                            m = new Date(i.date).toLocaleDateString(this.locale, a),
                            p = this.currencySymbol + l.pi.toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }),
                            y = this.currencySymbol + (i.pi - l.pi).toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }),
                            g = this.currencySymbol + i.pi.toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            });
                        c.innerHTML = m, d.innerHTML = p, u.innerHTML = y, h.innerHTML = g
                    } n.parentNode.replaceChild(r, n)
            }
        }, {
            key: "_updateMortgageTable",
            value: function V(e, t, a) {
                var n = document.getElementById("mortgage-summary").tBodies[0],
                    r = document.createElement("tbody"),
                    o = t.length,
                    i = t[o - 1],
                    l = e[e.length - 1],
                    s = (C = r.insertRow()).insertCell(0),
                    c = C.insertCell(1),
                    d = C.insertCell(2),
                    u = C.insertCell(3),
                    h = C.insertCell(4),
                    m = this.currencySymbol + e[0].pp.toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }),
                    p = this.currencySymbol + t[0].po.toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }),
                    y = parseInt(o / 12) + " years " + o % 12 + " months",
                    g = this.currencySymbol + (l.pi - i.pi).toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    });
                s.innerHTML = m, c.innerHTML = p, d.innerHTML = y, u.innerHTML = g, n.parentNode.replaceChild(r, n);
                for (var v = document.getElementById("tabulated-data").tBodies[0], w = document.createElement("tbody"), _ = 0; _ < t.length; ++_)
                    if (!(12 < t.length && (_ + 1) % 12 != 0)) {
                        var C, f = t[_],
                            b = (s = (C = w.insertRow()).insertCell(0), c = C.insertCell(1), d = C.insertCell(2), u = C.insertCell(3), h = C.insertCell(4), m = new Date(f.date).toLocaleDateString(this.locale, a), p = this.currencySymbol + f.p.toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }), y = this.currencySymbol + (f.pp - f.pi).toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }), g = this.currencySymbol + f.po.toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }), this.currencySymbol + f.pi.toLocaleString("en-GB", {
                                maximumFractionDigits: 0
                            }));
                        s.innerHTML = m, c.innerHTML = p, d.innerHTML = y, u.innerHTML = g, h.innerHTML = b
                    } v.parentNode.replaceChild(w, v)
            }
        }, {
            key: "_updateDrawdownMonteCarloTable",
            value: function O(e, t, a, n, r) {
                for (var o = document.getElementById("monte-carlo-tabulated-data").tBodies[0], i = 0, l = 0; l < e.length; ++l) {
                    var s = e[l];
                    s[s.length - 1].failed || (i += 1)
                }
                t[t.length - 1].failed || (i += 1);
                var c = document.createElement("tbody"),
                    d = c.insertRow(),
                    u = d.insertCell(0),
                    h = d.insertCell(1),
                    m = d.insertCell(2),
                    p = d.insertCell(3),
                    y = i / r * 100,
                    g = this.currencySymbol + a[a.length - 1].pi.toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }),
                    v = this.currencySymbol + t[t.length - 1].pi.toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    }),
                    w = this.currencySymbol + n[n.length - 1].pi.toLocaleString("en-GB", {
                        maximumFractionDigits: 0
                    });
                u.innerHTML = Math.round(y) + "%", h.innerHTML = g, m.innerHTML = v, p.innerHTML = w, o.parentNode.replaceChild(c, o)
            }
        }, {
            key: "_updateDrawdownTable",
            value: function U(e, t) {
                for (var a = document.getElementById("tabulated-data").tBodies[0], n = document.createElement("tbody"), r = 0; r < e.length; ++r) {
                    var o = e[r],
                        i = n.insertRow(),
                        l = i.insertCell(0),
                        s = i.insertCell(1),
                        c = i.insertCell(2),
                        d = i.insertCell(3),
                        u = i.insertCell(4),
                        h = new Date(o.date).toLocaleDateString(this.locale, t),
                        m = this.currencySymbol + o.pi.toLocaleString("en-GB", {
                            maximumFractionDigits: 0
                        }),
                        p = this.currencySymbol + o.pp.toLocaleString("en-GB", {
                            maximumFractionDigits: 0
                        }),
                        y = this.currencySymbol + o.pr.toLocaleString("en-GB", {
                            maximumFractionDigits: 0
                        }),
                        g = this.currencySymbol + o.pd.toLocaleString("en-GB", {
                            maximumFractionDigits: 0
                        });
                    l.innerHTML = h, s.innerHTML = m, c.innerHTML = p, d.innerHTML = y, u.innerHTML = g
                }
                a.parentNode.replaceChild(n, a)
            }
        }, {
            key: "_applyQueryStringParameter",
            value: function q(e, t, a) {
                e.has(t) && (document.getElementById(a).value = e.get(t))
            }
        }, {
            key: "_applyQueryStringCheckboxParameter",
            value: function z(e, t, a) {
                e.has(t) && "1" == e.get(t) ? document.getElementById(a).checked = !0 : document.getElementById(a).checked = !1
            }
        }, {
            key: "_extractCompoundQueryStrings",
            value: function Y() {
                var e = new URLSearchParams(window.location.search);
                this._applyQueryStringParameter(e, "N", "years"), this._applyQueryStringParameter(e, "P", "lump-sum"), this._applyQueryStringParameter(e, "m", "monthly-saving"), this._applyQueryStringParameter(e, "R", "rate")
            }
        }, {
            key: "_extractMortgageQueryStrings",
            value: function j() {
                var e = new URLSearchParams(window.location.search);
                this._applyQueryStringParameter(e, "N", "years"), this._applyQueryStringParameter(e, "P", "loan-amount"), this._applyQueryStringParameter(e, "op", "overpayment"), this._applyQueryStringParameter(e, "R", "rate")
            }
        }, {
            key: "_extractDrawdownQueryStrings",
            value: function K() {
                var e = new URLSearchParams(window.location.search);
                this._applyQueryStringParameter(e, "N", "years"), this._applyQueryStringParameter(e, "B", "birth-year"), this._applyQueryStringParameter(e, "D", "retirement-age"), this._applyQueryStringParameter(e, "RP", "retirement-drawdown-age"), this._applyQueryStringParameter(e, "RS", "state-pension-age"), this._applyQueryStringParameter(e, "PP", "pre-retirement-funds"), this._applyQueryStringParameter(e, "PR", "post-retirement-funds"), this._applyQueryStringParameter(e, "BP", "bond-alloc-pre-retirement"), this._applyQueryStringParameter(e, "BR", "bond-alloc-post-retirement"), this._applyQueryStringParameter(e, "ms", "monthly-state-pension"), this._applyQueryStringParameter(e, "mcp", "pre-retirement-contributions"), this._applyQueryStringParameter(e, "mcr", "post-retirement-contributions"), this._applyQueryStringParameter(e, "ri", "inflation-rate"), this._applyQueryStringParameter(e, "rb", "bond-growth"), this._applyQueryStringParameter(e, "rs", "stock-growth"), this._applyQueryStringParameter(e, "rw", "withdrawl-rate"), this._applyQueryStringParameter(e, "mme", "minimum-monthly-expenditure"), this._applyQueryStringCheckboxParameter(e, "hi", "historical-inflation-rate"), this._applyQueryStringCheckboxParameter(e, "hb", "historical-bond-growth"), this._applyQueryStringCheckboxParameter(e, "hs", "historical-stock-growth"), this._applyQueryStringCheckboxParameter(e, "s", "monte-carlo")
            }
        }, {
            key: "_updateDrawdownQueryStrings",
            value: function X(e, t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _, C) {
                if (history.pushState) {
                    var f = window.location.protocol + "//" + window.location.host + window.location.pathname + "?N=" + e + "&B=" + t + "&D=" + a + "&RP=" + n + "&RS=" + r + "&PP=" + o + "&PR=" + i + "&BP=" + l + "&BR=" + s + "&ms=" + c + "&mcp=" + d + "&mcr=" + u + "&mme=" + h + "&ri=" + m + "&rb=" + p + "&rs=" + y + "&rw=" + g + "&hi=" + v + "&hb=" + w + "&hs=" + _ + "&s=" + C;
                    document.getElementById("copy-value").value = f, window.history.pushState({
                        path: f
                    }, "", f)
                }
            }
        }, {
            key: "_updateCompoundQueryStrings",
            value: function J(e, t, a, n) {
                if (history.pushState) {
                    var r = window.location.protocol + "//" + window.location.host + window.location.pathname + "?N=" + e + "&P=" + t + "&m=" + a + "&R=" + n;
                    document.getElementById("copy-value").value = r, window.history.pushState({
                        path: r
                    }, "", r)
                }
            }
        }, {
            key: "_updateMortgageQueryStrings",
            value: function W(e, t, a, n) {
                if (history.pushState) {
                    var r = window.location.protocol + "//" + window.location.host + window.location.pathname + "?N=" + e + "&P=" + t + "&op=" + a + "&R=" + n;
                    document.getElementById("copy-value").value = r, window.history.pushState({
                        path: r
                    }, "", r)
                }
            }
        }, {
            key: "_calculateCompoundCalc", //alukret
            value: function Z() {
                var e = {
                        year: "numeric",
                        month: "short"
                    },
                    t = parseInt(document.getElementById("years").value),
                    a = parseFloat(document.getElementById("lump-sum").value),
                    n = parseFloat(document.getElementById("monthly-saving").value),
                    r = parseFloat(document.getElementById("rate").value);
                if (isNaN(t) || isNaN(a) || isNaN(n) || isNaN(r)) return document.getElementById("error-report").style.display = "block", document.getElementById("compound-calculator-chart").style.display = "none", void(document.getElementById("tabulated-data").style.display = "none");
                this._updateCompoundQueryStrings(t, a, n, r);
                var o = 12 * this.clamp(t, 1, 50),
                    i = a,
                    l = n,
                    s = this.clamp(r, 0, 100) / 100;
                document.getElementById("error-report").style.display = "none", document.getElementById("compound-calculator-chart").style.display = "", document.getElementById("tabulated-data").style.display = "";
                var c = this._generateInterestData(i, s, l, o),
                    d = this._generateInterestData(i, 0, l, o);
					
					
				if (null == this.compoundchart) {
					this.compoundchart = this._drawChart(this._prepData(d), this._prepData(c), "compound-calculator-chart", "line", "time")
				} else {
					(this.compoundchart.data.datasets[0].data = this._prepData(d),
					this.compoundchart.data.datasets[1].data = this._prepData(c),
					this.compoundchart.update())
				};
				this._updateCompoundTable(c, d, e)
				
                //null == this.compoundchart ? this.compoundchart = this._drawChart(this._prepData(d), this._prepData(c), "compound-calculator-chart", "line", "time") : (this.compoundchart.data.datasets[0].data = this._prepData(d), this.compoundchart.data.datasets[1].data = this._prepData(c), this.compoundchart.update()), this._updateCompoundTable(c, d, e)
				
				b();
				
            }
        }, {
            key: "_calculateDrawdownCalc",
            value: function $() {
                var e = {
                        year: "numeric",
                        month: "short"
                    },
                    t = parseInt(document.getElementById("years").value),
                    a = parseInt(document.getElementById("birth-year").value),
                    n = parseInt(document.getElementById("retirement-age").value),
                    r = parseInt(document.getElementById("retirement-drawdown-age").value),
                    o = parseInt(document.getElementById("state-pension-age").value),
                    i = parseFloat(document.getElementById("pre-retirement-funds").value),
                    l = parseFloat(document.getElementById("post-retirement-funds").value),
                    s = parseFloat(document.getElementById("bond-alloc-pre-retirement").value),
                    c = parseFloat(document.getElementById("bond-alloc-post-retirement").value),
                    d = parseFloat(document.getElementById("monthly-state-pension").value),
                    u = parseFloat(document.getElementById("pre-retirement-contributions").value),
                    h = parseFloat(document.getElementById("post-retirement-contributions").value),
                    m = parseFloat(document.getElementById("minimum-monthly-expenditure").value),
                    p = parseFloat(document.getElementById("inflation-rate").value),
                    y = parseFloat(document.getElementById("bond-growth").value),
                    g = parseFloat(document.getElementById("stock-growth").value),
                    v = parseFloat(document.getElementById("withdrawl-rate").value),
                    w = 0,
                    _ = 0,
                    C = 0,
                    f = 0;
                if (document.getElementById("monte-carlo").checked && (f = 1), document.getElementById("historical-bond-growth").checked && (_ = 1), document.getElementById("historical-stock-growth").checked && (C = 1), document.getElementById("historical-inflation-rate").checked && (w = 1), isNaN(t) || isNaN(a) || isNaN(n) || isNaN(r) || isNaN(o) || isNaN(i) || isNaN(l) || isNaN(s) || isNaN(c) || isNaN(d) || isNaN(u) || isNaN(h) || isNaN(p) || isNaN(y) || isNaN(g) || isNaN(m) || isNaN(v)) return document.getElementById("error-report").style.display = "block", document.getElementById("drawdown-calculator-chart").style.display = "none", document.getElementById("tabulated-data").style.display = "none", void(document.getElementById("monte-carlo-tabulated-data").style.display = "none");
                this._updateDrawdownQueryStrings(t, a, n, r, o, i, l, s, c, d, u, h, m, p, y, g, v, w, _, C, f);
                var b = new Date;
                this._addMonths(b, 1800);
                var k = this.clamp(t, 1, 50),
                    B = this.clamp(a, 1900, b.getFullYear()),
                    S = this.clamp(n, 0, 100),
                    D = this.clamp(r, 0, 100),
                    I = this.clamp(o, 0, 100),
                    E = i,
                    M = l,
                    L = this.clamp(s, 0, 100) / 100,
                    N = this.clamp(c, 0, 100) / 100,
                    P = 12 * d,
                    x = 12 * u,
                    T = 12 * h,
                    F = 12 * m,
                    Q = this.clamp(p, 0, 100) / 100 + 1,
                    H = this.clamp(y, 0, 100) / 100 + 1,
                    R = this.clamp(g, 0, 100) / 100 + 1,
                    G = this.clamp(v, 0, 100) / 100;
                document.getElementById("error-report").style.display = "none", document.getElementById("drawdown-calculator-chart").style.display = "", document.getElementById("tabulated-data").style.display = "", document.getElementById("monte-carlo").checked ? document.getElementById("monte-carlo-tabulated-data").style.display = "" : document.getElementById("monte-carlo-tabulated-data").style.display = "none";
                var A = null,
                    V = 100;
                if (document.getElementById("monte-carlo").checked) {
                    for (var O = [], U = 0; U < V; ++U) O.push(this._generateDrawdownData(k, B, S, D, I, E, M, L, N, P, x, T, F, Q, H, R, G, document.getElementById("historical-bond-growth").checked, document.getElementById("historical-stock-growth").checked, document.getElementById("historical-inflation-rate").checked));
                    O.sort(function(e, t) {
                        return e[e.length - 1].pi - t[t.length - 1].pi
                    });
                    var q = Math.floor(O.length / 2),
                        z = O[q];
                    A = z, O.splice(q, 1);
                    var Y = Math.floor(O.length / 4),
                        j = O[Y],
                        K = O[3 * Y];
                    if (null == this.drawdownchart) {
                        var X = [];
                        for (U = 0; U < O.length; ++U) X.push(this._prepData(O[U]));
                        this.drawdownchart = this._drawMultiLineChart(this._prepData(z), X, "drawdown-calculator-chart", "line", "time")
                    } else {
                        this.drawdownchart.data.datasets[0].data = this._prepData(z);
                        for (U = 0; U < O.length; ++U) this.drawdownchart.data.datasets[U + 1].data = this._prepData(O[U]);
                        this.drawdownchart.update()
                    }
                } else {
                    var J = this._generateDrawdownData(k, B, S, D, I, E, M, L, N, P, x, T, F, Q, H, R, G, document.getElementById("historical-bond-growth").checked, document.getElementById("historical-stock-growth").checked, document.getElementById("historical-inflation-rate").checked);
                    A = J, null == this.drawdownchart ? this.drawdownchart = this._drawChart(this._prepData(J), null, "drawdown-calculator-chart", "line", "time") : (this.drawdownchart.data.datasets[0].data = this._prepData(J), this.drawdownchart.update())
                }
                document.getElementById("monte-carlo").checked && this._updateDrawdownMonteCarloTable(O, z, j, K, V, e), this._updateDrawdownTable(A, e)
            }
        }, {
            key: "_calculateMortgageCalc",
            value: function ee() {
                var e = {
                        year: "numeric",
                        month: "short"
                    },
                    t = parseInt(document.getElementById("years").value),
                    a = parseFloat(document.getElementById("loan-amount").value),
                    n = parseFloat(document.getElementById("overpayment").value),
                    r = parseFloat(document.getElementById("rate").value);
                if (isNaN(t) || isNaN(a) || isNaN(n) || isNaN(r)) return document.getElementById("error-report").style.display = "block", document.getElementById("mortgage-calculator-chart").style.display = "none", void(document.getElementById("tabulated-data").style.display = "none");
                this._updateMortgageQueryStrings(t, a, n, r);
                var o = 12 * this.clamp(t, 1, 50),
                    i = a,
                    l = n,
                    s = this.clamp(r, 0, 100) / 100;
                document.getElementById("error-report").style.display = "none", document.getElementById("mortgage-calculator-chart").style.display = "", document.getElementById("tabulated-data").style.display = "";
                var c = this._generateLoanData(i, s / 12, o, 0),
                    d = this._generateLoanData(i, s / 12, o, l);
                null == this.mortgagechart ? this.mortgagechart = this._drawChart(this._prepData(c), this._prepData(d), "mortgage-calculator-chart", "line", "time") : (this.mortgagechart.data.datasets[0].data = this._prepData(c), this.mortgagechart.data.datasets[1].data = this._prepData(d), this.mortgagechart.update()), this._updateMortgageTable(c, d, e)
            }
        }, {
            key: "displayCompoundCalculator",
            value: function te() {
                var e = this;
                this._extractCompoundQueryStrings(), document.getElementById("copy-value").value = window.location, this._calculateCompoundCalc(), document.getElementById("rate").onchange = function() {
                    return e._calculateCompoundCalc()
                }, document.getElementById("lump-sum").onchange = function() {
                    return e._calculateCompoundCalc()
                }, document.getElementById("monthly-saving").onchange = function() {
                    return e._calculateCompoundCalc()
                }, document.getElementById("years").onchange = function() {
                    return e._calculateCompoundCalc()
                }, document.getElementById("calculate").onclick = function() {
                    return e._calculateCompoundCalc()
                };
                new Clipboard("#copy-link", {
                    text: function t() {
                        return document.querySelector("#copy-value").value
                    }
                })
            }
        }, {
            key: "displayMortgageCalculator",
            value: function ae() {
                var e = this;
                this._extractMortgageQueryStrings(), document.getElementById("copy-value").value = window.location, this._calculateMortgageCalc(), document.getElementById("rate").onchange = function() {
                    return e._calculateMortgageCalc()
                }, document.getElementById("loan-amount").onchange = function() {
                    return e._calculateMortgageCalc()
                }, document.getElementById("overpayment").onchange = function() {
                    return e._calculateMortgageCalc()
                }, document.getElementById("years").onchange = function() {
                    return e._calculateMortgageCalc()
                }, document.getElementById("calculate").onclick = function() {
                    return e._calculateMortgageCalc()
                };
                new Clipboard("#copy-link", {
                    text: function t() {
                        return document.querySelector("#copy-value").value
                    }
                })
            }
        }, {
            key: "displayDrawdownCalculator",
            value: function ne() {
                var t = this;
                this._extractDrawdownQueryStrings(), document.getElementById("copy-value").value = window.location, this._calculateDrawdownCalc(), document.getElementById("calculate").onclick = function() {
                    return t._calculateDrawdownCalc()
                }, document.getElementById("monte-carlo").onclick = function() {
                    if (null != t.drawdownchart) {
                        t.drawdownchart.destroy();
                        for (var e = document.getElementById("drawdown-calculator-chart"); e.firstChild;) e.removeChild(e.lastChild);
                        t.drawdownchart = null
                    }
                    t._calculateDrawdownCalc()
                }, document.getElementById("historical-inflation-rate").onclick = function() {
                    return t._toggleCheckboxLinkedField("historical-inflation-rate", "inflation-rate")
                }, document.getElementById("historical-bond-growth").onclick = function() {
                    return t._toggleCheckboxLinkedField("historical-bond-growth", "bond-growth")
                }, document.getElementById("historical-stock-growth").onclick = function() {
                    return t._toggleCheckboxLinkedField("historical-stock-growth", "stock-growth")
                };
                new Clipboard("#copy-link", {
                    text: function e() {
                        return document.querySelector("#copy-value").value
                    }
                })
            }
        }, {
            key: "_toggleCheckboxLinkedField",
            value: function re(e, t) {
                document.getElementById(t).disabled = document.getElementById(e).checked
            }
        }, {
            key: "toc",
            value: function e(t) {
                for (var e = document.getElementById(t), a = document.querySelectorAll("h2, h3, h4"), n = [], r = 0; r < a.length; ++r) {
                    a[r].parentNode == e.parentNode && n.push(a[r])
                }
                var o = [];
                this._tocListToGraph(0, o, 0, n), this._appendOl(e, o, 0)
            }
        }]), e
    }(),
    moneymage = new MoneyMage;